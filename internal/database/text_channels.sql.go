// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: text_channels.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createTextChannel = `-- name: CreateTextChannel :one
INSERT INTO text_channels (
        id,
        owner_id,
        server_id,
        language_id,
        channel_name,
        created_at,
        updated_at
    )
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING id, owner_id, server_id, language_id, channel_name, last_active, is_locked, created_at, updated_at
`

type CreateTextChannelParams struct {
	ID          uuid.UUID `json:"id"`
	OwnerID     uuid.UUID `json:"owner_id"`
	ServerID    uuid.UUID `json:"server_id"`
	LanguageID  uuid.UUID `json:"language_id"`
	ChannelName string    `json:"channel_name"`
	CreatedAt   time.Time `json:"created_at"`
	UpdatedAt   time.Time `json:"updated_at"`
}

func (q *Queries) CreateTextChannel(ctx context.Context, arg CreateTextChannelParams) (TextChannel, error) {
	row := q.db.QueryRowContext(ctx, createTextChannel,
		arg.ID,
		arg.OwnerID,
		arg.ServerID,
		arg.LanguageID,
		arg.ChannelName,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i TextChannel
	err := row.Scan(
		&i.ID,
		&i.OwnerID,
		&i.ServerID,
		&i.LanguageID,
		&i.ChannelName,
		&i.LastActive,
		&i.IsLocked,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getServerTextChannels = `-- name: GetServerTextChannels :many
SELECT id, owner_id, server_id, language_id, channel_name, last_active, is_locked, created_at, updated_at FROM text_channels
WHERE server_id = $1
`

func (q *Queries) GetServerTextChannels(ctx context.Context, serverID uuid.UUID) ([]TextChannel, error) {
	rows, err := q.db.QueryContext(ctx, getServerTextChannels, serverID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TextChannel
	for rows.Next() {
		var i TextChannel
		if err := rows.Scan(
			&i.ID,
			&i.OwnerID,
			&i.ServerID,
			&i.LanguageID,
			&i.ChannelName,
			&i.LastActive,
			&i.IsLocked,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
