// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: text_messages.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createTextMessage = `-- name: CreateTextMessage :one
INSERT INTO text_messages (
        id,
        owner_id,
        channel_id,
        message,
        image,
        created_at,
        updated_at
    )
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING id, owner_id, channel_id, message, image, created_at, updated_at
`

type CreateTextMessageParams struct {
	ID        uuid.UUID      `json:"id"`
	OwnerID   uuid.UUID      `json:"owner_id"`
	ChannelID uuid.UUID      `json:"channel_id"`
	Message   string         `json:"message"`
	Image     sql.NullString `json:"image"`
	CreatedAt time.Time      `json:"created_at"`
	UpdatedAt time.Time      `json:"updated_at"`
}

func (q *Queries) CreateTextMessage(ctx context.Context, arg CreateTextMessageParams) (TextMessage, error) {
	row := q.db.QueryRowContext(ctx, createTextMessage,
		arg.ID,
		arg.OwnerID,
		arg.ChannelID,
		arg.Message,
		arg.Image,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i TextMessage
	err := row.Scan(
		&i.ID,
		&i.OwnerID,
		&i.ChannelID,
		&i.Message,
		&i.Image,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getChannelTextMessages = `-- name: GetChannelTextMessages :many
SELECT t.id,
    t.owner_id,
    t.channel_id,
    t.message,
    t.image,
    t.created_at,
    t.updated_at,
    u.handle,
    u.avatar_url
FROM text_messages t
    INNER JOIN users u ON t.owner_id = u.id
WHERE t.channel_id = $1
`

type GetChannelTextMessagesRow struct {
	ID        uuid.UUID      `json:"id"`
	OwnerID   uuid.UUID      `json:"owner_id"`
	ChannelID uuid.UUID      `json:"channel_id"`
	Message   string         `json:"message"`
	Image     sql.NullString `json:"image"`
	CreatedAt time.Time      `json:"created_at"`
	UpdatedAt time.Time      `json:"updated_at"`
	Handle    string         `json:"handle"`
	AvatarUrl sql.NullString `json:"avatar_url"`
}

func (q *Queries) GetChannelTextMessages(ctx context.Context, channelID uuid.UUID) ([]GetChannelTextMessagesRow, error) {
	rows, err := q.db.QueryContext(ctx, getChannelTextMessages, channelID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetChannelTextMessagesRow
	for rows.Next() {
		var i GetChannelTextMessagesRow
		if err := rows.Scan(
			&i.ID,
			&i.OwnerID,
			&i.ChannelID,
			&i.Message,
			&i.Image,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Handle,
			&i.AvatarUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
